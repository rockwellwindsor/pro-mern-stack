{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","console","log","error","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","_id","result","insertedId","limit","next","MongoClient","connect","connection","listen"],"mappings":";;AACA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;AACA;;;;;;AANAA,2BAAiBC,OAAjB;;;AAQA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEAL,IAAIM,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCC,KAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8C,kBAAU;AACtD,QAAMC,WAAW,EAAEC,aAAaC,OAAOC,MAAtB,EAAjB;AACAT,QAAIH,IAAJ,CAAS,EAAEa,WAAWJ,QAAb,EAAuBK,SAASH,MAAhC,EAAT;AACD,GAHD,EAGGI,KAHH,CAGS,iBAAS;AAChBC,YAAQC,GAAR,CAAYC,KAAZ;AACAf,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,qCAAmCF,KAArC,EAArB;AACD,GAND;AAOD,CARD;;AAUAvB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,UAACnB,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EACEG,SAASH,MAAT,GAAkB,KAAlB;;AAEF,MAAMO,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPvB,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,+BAA6BM,GAA/B,EAArB;AACA;AACD;;AAEDtB,KAAGC,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkCP,QAAlC,EAA4Cd,IAA5C,CAAiD;AAAA,WAC/CJ,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEwB,KAAKC,OAAOC,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkEC,IAAlE,EAD+C;AAAA,GAAjD,EAEE1B,IAFF,CAEO,oBAAY;AACjBL,QAAIH,IAAJ,CAASsB,QAAT;AACD,GAJD,EAIGP,KAJH,CAIS,iBAAS;AAChBC,YAAQC,GAAR,CAAYC,KAAZ;AACAf,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,qCAAmCF,KAArC,EAArB;AACD,GAPD;AAQD,CApBD;;AAsBA,IAAId,WAAJ;AACA+B,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwD5B,IAAxD,CAA6D,sBAAc;AACzEJ,OAAKiC,UAAL;AACA1C,MAAI2C,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBtB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGF,KALH,CAKS,iBAAS;AAChBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues })\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch(error => {\n  console.log('ERROR:', error);\n});\n"]}